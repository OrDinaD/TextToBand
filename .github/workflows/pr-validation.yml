name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Validate Pull Request
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-xcode-${{ hashFiles('**/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-xcode-

    - name: Check for merge conflicts
      run: |
        if git merge-tree $(git merge-base HEAD main) HEAD main | grep -q "<<<<<<< "; then
          echo "‚ùå Merge conflicts detected"
          exit 1
        else
          echo "‚úÖ No merge conflicts"
        fi

    - name: Validate project structure
      run: |
        echo "üîç Validating project structure..."
        if [ ! -f "TextToBand.xcodeproj/project.pbxproj" ]; then
          echo "‚ùå Xcode project not found"
          exit 1
        fi
        
        if [ ! -d "TextToBand" ]; then
          echo "‚ùå Source directory not found"
          exit 1
        fi
        
        echo "‚úÖ Project structure is valid"

    - name: Build project
      run: |
        echo "üî® Building project..."
        xcodebuild -project TextToBand.xcodeproj \
                   -scheme TextToBand \
                   -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
                   clean build | xcpretty

    - name: Run tests
      run: |
        echo "üß™ Running tests..."
        xcodebuild -project TextToBand.xcodeproj \
                   -scheme TextToBand \
                   -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
                   test | xcpretty

    - name: SwiftLint
      run: |
        if command -v swiftlint >/dev/null 2>&1; then
          echo "üîç Running SwiftLint..."
          swiftlint --strict
        else
          echo "‚ö†Ô∏è SwiftLint not installed, skipping..."
        fi

    - name: Check for TODO/FIXME comments
      run: |
        echo "üîç Checking for TODO/FIXME comments..."
        if grep -r "TODO\|FIXME" TextToBand/ --include="*.swift"; then
          echo "‚ö†Ô∏è TODO/FIXME comments found - consider addressing them"
        else
          echo "‚úÖ No TODO/FIXME comments found"
        fi

    - name: Validate commit messages
      run: |
        echo "üìù Validating commit messages..."
        git log --oneline main..HEAD | while read line; do
          if [[ ! "$line" =~ ^[a-f0-9]+\ (feat|fix|docs|style|refactor|test|chore)(\(.+\))?:\ .+ ]]; then
            echo "‚ö†Ô∏è Commit message doesn't follow conventional format: $line"
          fi
        done

    - name: Check file sizes
      run: |
        echo "üìè Checking for large files..."
        find . -name "*.swift" -size +50k -exec echo "‚ö†Ô∏è Large Swift file found: {} ($(du -h {} | cut -f1))" \;
        find . -type f -size +10M -exec echo "‚ùå Very large file found: {} ($(du -h {} | cut -f1))" \; -exec exit 1 \;

    - name: Security scan
      run: |
        echo "üîí Running basic security checks..."
        if grep -r "http://" TextToBand/ --include="*.swift"; then
          echo "‚ö†Ô∏è HTTP URLs found - consider using HTTPS"
        fi
        
        if grep -r "password\|secret\|key" TextToBand/ --include="*.swift" -i; then
          echo "‚ö†Ô∏è Potential sensitive data found in code"
        fi

    - name: Generate test coverage
      run: |
        echo "üìä Generating test coverage..."
        xcodebuild -project TextToBand.xcodeproj \
                   -scheme TextToBand \
                   -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
                   -enableCodeCoverage YES \
                   test | xcpretty

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PR')
          );
          
          const commentBody = `ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PR –∑–∞–≤–µ—Ä—à–µ–Ω–∞**
          
          ‚úÖ –°–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
          ‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
          ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞
          
          üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
          - –ö–æ–º–º–∏—Ç–æ–≤: \`${context.payload.pull_request.commits}\`
          - –ò–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: \`${context.payload.pull_request.changed_files}\`
          - –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: \`+${context.payload.pull_request.additions}\`
          - –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: \`-${context.payload.pull_request.deletions}\`
          
          üéØ **–ì–æ—Ç–æ–≤ –∫ —Ä–µ–≤—å—é!**
          
          ---
          *–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ ${new Date().toLocaleString('ru-RU')}*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
